package legstar.samples.custdat;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;

import com.legstar.base.FromHostResult;

/**
 * Sample code that invokes a converter to transform host data read off a file
 * into a JAXB instance.
 * <p/>
 * This sample uses the {@link Cob2CustomerData} class that was generated by the
 * legstar JAXB generator starting from the CUSTDAT COBOL copybook.
 * <p/>
 * In this sample the host data is read from a file for convenience but it could
 * come from any source (RPC, JMS, ...).
 *
 */
public class CustdatSample {

    public static void main(final String[] args) {
        CustdatSample main = new CustdatSample();
        main.convert(args[0]);
    }

    public void convert(String filePath) {

        try {
            Cob2CustomerData converter = new Cob2CustomerData();
            byte[] hostData = readFromFile(filePath, converter.getMaxBytesLen());
            FromHostResult < CustomerData > result = converter.convert(
                    hostData, 0);
            print(result);

        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    /**
     * Printout the result of the conversion.
     * <p/>
     * The JAXB instance produced is serialized as XML for readability.
     * 
     * @param result the result of the legstar conversion to a JAXB instance
     * @throws JAXBException if printing fails
     */
    private void print(FromHostResult < CustomerData > result)
            throws JAXBException {
        System.out.println("Host bytes converted : "
                + result.getBytesProcessed());
        System.out.println("Result JAXB instance as XML :");
        JAXBContext jaxbContext = JAXBContext.newInstance(CustomerData.class);
        Marshaller marshaller = jaxbContext.createMarshaller();
        marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);
        marshaller.marshal(
                new ObjectFactory().createCustomerData(result.getValue()),
                System.out);
    }

    /**
     * Fill a buffer with raw bytes read off a file.
     * 
     * @param filePath the input file location on file system
     * @param length the number of bytes to read off the file
     * @return a buffer filled with raw host data
     * @throws IOException if file cannot be read
     */
    private byte[] readFromFile(String filePath, int length) throws IOException {
        byte[] buffer = new byte[length];
        FileInputStream fis = null;
        try {
            fis = new FileInputStream(new File(filePath));
            int r = buffer.length;
            while (r > 0) {
                int p = buffer.length - r;
                int c = fis.read(buffer, p, r);
                if (c == -1) {
                    break;
                }
                r -= c;
            }
            return buffer;
        } finally {
            if (fis != null) {
                fis.close();
            }
        }

    }

}
